@using Agence_Practical_Test.DTO;
@model List<ConDesemConsultorRel>

@{
    List<string> xValues = new List<string>();
    List<float> yValues = new List<float>();
    var myCharty = new Chart(width: 600, height: 400, theme: "<Chart BackColor=\"#756a6a\" BackGradientStyle=\"TopBottom\" BorderColor=\"64, 64, 64,255\" BorderWidth=\"10\" BorderlineDashStyle=\"Solid\" Palette=\"EarthTones\" AntiAliasing=\"All\">\r\n   \r\n  <ChartAreas>\r\n    <ChartArea Name=\"Default\" _Template_=\"All\" BackColor=\"Transparent\" BackSecondaryColor=\"White\" BorderColor=\"64, 64, 64, 64\" BorderDashStyle=\"Solid\" ShadowColor=\"Transparent\">\r\n            <Area3DStyle LightStyle=\"Realistic\" Enable3D=\"True\" Inclination=\"30\" IsClustered=\"False\" IsRightAngleAxes=\"True\" Perspective=\"40\" Rotation=\"35\" WallWidth=\"1\" />\r\n        </ChartArea>\r\n    </ChartAreas>\r\n    <Legends>\r\n        <Legend _Template_=\"All\" BackColor=\"Transparent\" Font=\"Trebuchet MS, 8.25pt, style=Bold\" IsTextAutoFit=\"True\" /> \r\n    </Legends>\r\n    </Chart>");
   
    if (Model.Count > 0)
    {
        myCharty.AddSeries(name: Model[0].Name, chartType: "Pie", xValue: Model.Select<ConDesemConsultorRel, string>(x => $" {x.Name} - {x.Saldo.ReceitaLiquida * 100 / Model.Sum(m => m.Saldo.ReceitaLiquida)} %").ToList(), yValues: Model.Select<ConDesemConsultorRel, float>(x => x.Saldo.ReceitaLiquida).ToList());
    }
    myCharty.AddLegend();
    myCharty.AddTitle($"Participacao na Receita");
    myCharty.Write();
}
